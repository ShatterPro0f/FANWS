[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fanws"
version = "1.0.0"
description = "Fiction AI Novel Writing Suite - AI-powered writing assistant for fiction authors"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "FANWS Development Team", email = "contact@fanws.dev"}
]
maintainers = [
    {name = "FANWS Development Team", email = "contact@fanws.dev"}
]
keywords = [
    "writing",
    "fiction",
    "ai",
    "novel",
    "assistant",
    "authoring",
    "creative-writing",
    "story-development"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Text Processing :: Authoring",
    "Topic :: Office/Business :: Office Suites",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: X11 Applications :: Qt",
    "Environment :: Win32 (MS Windows)",
    "Environment :: MacOS X"
]
requires-python = ">=3.8"
dependencies = [
    # GUI Framework
    "PyQt5>=5.15.0",
    "PyQtWebEngine>=5.15.0",

    # Core Functionality
    "PyYAML>=6.0",
    "python-dotenv>=0.19.0",
    "psutil>=5.8.0",
    "tenacity>=8.0.0",

    # Text Processing
    "python-docx>=0.8.11",
    "markdown2>=2.4.0",

    # Database and Data
    "lz4>=4.0.0",

    # Network and API
    "aiohttp>=3.8.0",
    "requests>=2.28.0",

    # Analytics and NLP
    "nltk>=3.8",
    "textstat>=0.7.0",
    "scikit-learn>=1.2.0",
    "numpy>=1.24.0",

    # Document Generation
    "reportlab>=4.0.0",
    "ebooklib>=0.18",
    "pdfkit>=1.0.0",

    # Plotting and Visualization
    "matplotlib>=3.6.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-qt>=4.2.0",
    "pytest-asyncio>=0.21.0"
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0"
]

[project.urls]
Homepage = "https://github.com/ShatterPro0f/FANWS"
Documentation = "https://fanws.readthedocs.io"
Repository = "https://github.com/ShatterPro0f/FANWS"
"Bug Tracker" = "https://github.com/ShatterPro0f/FANWS/issues"
Changelog = "https://github.com/ShatterPro0f/FANWS/blob/main/CHANGELOG.md"

[project.scripts]
fanws = "fanws:main"

[project.gui-scripts]
fanws-gui = "fanws:main"

[tool.setuptools]
packages = ["src", "plugins", "templates"]
include-package-data = true

[tool.setuptools.package-dir]
"" = "."

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.txt", "*.md", "*.sql", "*.db"]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    "*.egg-info",
    ".venv",
    ".tox"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["PyQt5.*", "reportlab.*", "ebooklib.*", "nltk.*", "sklearn.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gui: marks tests as GUI tests",
    "ai: marks tests as AI-related tests"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
